@page "/insert"
<PageTitle>Insert Employee</PageTitle>

@using Employee.Models;
@using Employee.Data;
@using Microsoft.AspNetCore.Components;
@inject EmployeeService EmployeeService;
@inject NavigationManager NavigationManager;


<EditForm Model="NewEmployee" OnValidSubmit="AddEmployee">
    <DataAnnotationsValidator />
    <div class="form-group">
        <label for="name">Name:</label>
        <InputText class="form-control" id="name" @bind-Value="NewEmployee.Ename" />
        <ValidationMessage For="@(() => NewEmployee.Ename)" />
    </div>
    <div class="form-group">
        <label for="department">Department:</label>
        <InputText class="form-control" id="department" @bind-Value="NewEmployee.DeptName" />
        <ValidationMessage For="@(() => NewEmployee.DeptName)" />
    </div>
    <div class="form-group">
        <label for="age">Age:</label>
        <InputNumber class="form-control" id="age" @bind-Value="NewEmployee.Age" />
        <ValidationMessage For="@(() => NewEmployee.Age)" />
    </div>
    <div class="form-group">
        <label for="salary">Salary:</label>
        <InputNumber class="form-control" id="salary" @bind-Value="NewEmployee.Salary" />
        <ValidationMessage For="@(() => NewEmployee.Salary)" />
    </div>

    <div class="form-group">
        <label>Skills:</label>
        @foreach (var skill in allSkills)
        {
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="@($"chk_{skill.SkillID}")"
                       checked="@selectedSkills.Contains(skill.SkillID)"
                       @onchange="@(e => ToggleSkill(skill.SkillID))" />
                <label class="form-check-label" for="@($"chk_{skill.SkillID}")">@skill.SkillName</label>
            </div>
        }
    </div>

    <button type="submit" class="btn btn-primary">Add Employee</button>

   
</EditForm>

@* <EditForm Model="NewEmployee" OnSubmit="AddEmployee">
    <DataAnnotationsValidator />
    <ul class="row forumBox">
        <li class="col-3 required">
            <label class="inputLabel">Name:</label>
        </li>
        <li class="col-3">
            <div class="form_inputBox">
                <InputText @bind-Value="NewEmployee.Ename" class="form-control" maxlength="20" />
            </div>
            <div class="erroeText">
                <ValidationMessage For="(() => NewEmployee.Ename)"></ValidationMessage>
            </div>
        </li>

        <li class="col-3 required">
            <label class="inputLabel">Department:</label>
        </li>
        <li class="col-3">
            <div class="form_inputBox">
                <InputText @bind-Value="NewEmployee.DeptName" class="form-control" maxlength="20" />
            </div>
            <div class="erroeText">
                <ValidationMessage For="(() => NewEmployee.DeptName)"></ValidationMessage>
            </div>
        </li>

        
         <li class="col-3 required">
            <label class="inputLabel">Age:</label>
        </li>
        <li class="col-3">
            <div class="form_inputBox">
                <InputNumber @bind-Value="NewEmployee.Age" class="form-control" maxlength="20" />
            </div>
            <div class="erroeText">
                <ValidationMessage For="(() => NewEmployee.Age)"></ValidationMessage>
            </div>
        </li>

        <li class="col-3 required">
            <label class="inputLabel">Salary:</label>
        </li>
        <li class="col-3">
            <div class="form_inputBox">
                <InputNumber @bind-Value="NewEmployee.Age" class="form-control" maxlength="20" />
            </div>
            <div class="erroeText">
                <ValidationMessage For="(() => NewEmployee.Age)"></ValidationMessage>
            </div>
        </li>

        
    </ul>

</EditForm> *@


@if (IsEmployeeAdded)
{
    <p class="text-success">Employee added successfully!</p>
}

@code {
    private List<GetAllSkillsResult> allSkills = new List<GetAllSkillsResult>();
    private Employee NewEmployee = new Employee();
    private bool IsEmployeeAdded = false;
    private List<int> selectedSkills = new List<int>();

    protected override async Task OnInitializedAsync()
    {
        // Fetch the list of available skills from the service
        allSkills = await EmployeeService.GetSkillsOnly();
    }

    private void ToggleSkill(int skillId)
    {
        if (selectedSkills.Contains(skillId))
            selectedSkills.Remove(skillId);
        else
            selectedSkills.Add(skillId);
    }

    private async Task AddEmployee()
    {
        // Convert the selected skills to a comma-separated string
        NewEmployee.Skills = string.Join(",", selectedSkills);

        int affectedRows = await EmployeeService.InsertEmployee(
            NewEmployee.Ename,
            NewEmployee.DeptName,
            NewEmployee.Age,
            NewEmployee.Salary,
            NewEmployee.Skills,
            selectedSkills
        );

        if (affectedRows > 0)
        {
            IsEmployeeAdded = true;
            // Optionally, you can reset the form or do any other necessary actions after successful insertion
            NewEmployee = new Employee();
            // Navigate to another page
            NavigationManager.NavigateTo("/fetchdataEmp");
        }
    }
}
